
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://bgnngzkkpeifzayrjvbz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJnbm5nemtrcGVpZnpheXJqdmJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNDQ5ODcsImV4cCI6MjA1ODkyMDk4N30.5JDoF8xK3e1fLv14TUZ4tTrbE4llP_6fqtg0PY-dYlw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  }
});

// Enable realtime for all tables we use in admin panel
const channel = supabase.channel('admin-panel-changes')
  // Realtime for slider images
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'slider_images' 
  }, (payload) => {
    console.log('Change received on slider_images!', payload);
  })
  // Realtime for social links
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'social_links' 
  }, (payload) => {
    console.log('Change received on social_links!', payload);
  })
  // Realtime for gallery items
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'gallery_items' 
  }, (payload) => {
    console.log('Change received on gallery_items!', payload);
  })
  // Realtime for events
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'events' 
  }, (payload) => {
    console.log('Change received on events!', payload);
  })
  // Add realtime for tickets 
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'tickets' 
  }, (payload) => {
    console.log('Change received on tickets!', payload);
  })
  // Add realtime for partners
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'partners' 
  }, (payload) => {
    console.log('Change received on partners!', payload);
  })
  // Add realtime for countdown settings
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'countdown_settings' 
  }, (payload) => {
    console.log('Change received on countdown_settings!', payload);
  })
  // Add realtime for schedule days and events
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'schedule_days' 
  }, (payload) => {
    console.log('Change received on schedule_days!', payload);
  })
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'schedule_events' 
  }, (payload) => {
    console.log('Change received on schedule_events!', payload);
  })
  .subscribe();

// Export the channel for potential cleanup
export const realtimeChannel = channel;

// Define a base event interface that all components can use
export interface Event {
  id: string;
  name: string;
  description: string | null;
  place: string;
  location: string | null;
  event_date: string;
  image_url: string | null;
  category: string;
  created_at?: string;
  updated_at?: string;
  past?: boolean;
  
  // Additional fields needed for EventItem component
  title?: string;
  date?: string;
  time?: string;
  image?: string;
  registrationLink?: string;
}

// Define a Ticket interface for the tickets table
export interface Ticket {
  id: string;
  name: string;
  price: number;
  description: string | null;
  available: boolean;
  features?: string[];
  created_at?: string;
  updated_at?: string;
}

// Define a Partner interface for the partners table
export interface Partner {
  id: string;
  name: string;
  logo_url: string;
  website_url: string | null;
  order_number: number;
  active: boolean;
  category: string | null;
  created_at?: string;
  updated_at?: string;
}

// Define a CountdownSettings interface for the countdown_settings table
export interface CountdownSettingsDB {
  id: string;
  title: string;
  target_date: string;
  background_color: string;
  text_color: string;
  background_image_url: string | null;
  enabled: boolean;
  show_on_load: boolean;
  display_duration: number;
  created_at: string;
  updated_at: string;
}

// Define interfaces for the tables not included in the auto-generated types
export interface PageContent {
  id: string;
  page_id: string;
  content: Json;
  created_at: string;
  updated_at: string;
}

export interface NewsletterSubscriber {
  id: string;
  email: string;
  subscribed_at: string;
}

// Define schedule related interfaces
export interface ScheduleDay {
  id: string;
  date: string;
  day_name: string;
  order_number: number;
  created_at?: string;
  updated_at?: string;
}

export interface ScheduleEvent {
  id: string;
  day_id: string;
  title: string;
  description: string | null;
  start_time: string;
  end_time: string;
  location: string | null;
  category: string;
  order_number: number;
  file_url?: string | null;
  link_url?: string | null;
  link_text?: string | null;
  created_at?: string;
  updated_at?: string;
}

// Define a Json type to match Supabase's Json type
export type Json = 
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json }
  | Json[];

// Create a helper function to safely handle Supabase data
export function safeDataAccess<T>(item: any, defaultValue: T): T {
  return item !== undefined && item !== null ? item as T : defaultValue;
}

/**
 * Helper function to upload a file to Supabase storage
 * @param file - The file to upload
 * @param bucket - The bucket to upload to
 * @param path - Optional path within the bucket
 * @returns URL of the uploaded file or null if upload failed
 */
export async function uploadFileToSupabase(
  file: File, 
  bucket: string = 'logos',
  path?: string
): Promise<string | null> {
  try {
    const fileName = path ? `${path}/${Date.now()}_${file.name.replace(/\s+/g, '_')}` : `${Date.now()}_${file.name.replace(/\s+/g, '_')}`;
    
    const { data, error } = await supabase.storage
      .from(bucket)
      .upload(fileName, file, {
        cacheControl: '3600',
        upsert: true,
      });

    if (error) {
      console.error('Error uploading file:', error);
      return null;
    }

    // Get the public URL
    const { data: urlData } = supabase.storage
      .from(bucket)
      .getPublicUrl(data.path);

    return urlData.publicUrl;
  } catch (error) {
    console.error('Exception when uploading file:', error);
    return null;
  }
}

// Create a typed version of supabase client that includes better type safety
export const customSupabase = {
  from: (table: string) => supabase.from(table),
  channel: (name: string) => supabase.channel(name),
  removeChannel: (channel: any) => supabase.removeChannel(channel),
  storage: supabase.storage,
  auth: supabase.auth
};
