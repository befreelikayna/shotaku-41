
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bgnngzkkpeifzayrjvbz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJnbm5nemtrcGVpZnpheXJqdmJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNDQ5ODcsImV4cCI6MjA1ODkyMDk4N30.5JDoF8xK3e1fLv14TUZ4tTrbE4llP_6fqtg0PY-dYlw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  }
});

// Enable realtime for all tables we use in admin panel
const channel = supabase.channel('admin-panel-changes')
  // Realtime for slider images
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'slider_images' 
  }, (payload) => {
    console.log('Change received on slider_images!', payload);
  })
  // Realtime for social links
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'social_links' 
  }, (payload) => {
    console.log('Change received on social_links!', payload);
  })
  // Realtime for gallery items
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'gallery_items' 
  }, (payload) => {
    console.log('Change received on gallery_items!', payload);
  })
  // Realtime for events
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'events' 
  }, (payload) => {
    console.log('Change received on events!', payload);
  })
  // Add realtime for tickets 
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'tickets' 
  }, (payload) => {
    console.log('Change received on tickets!', payload);
  })
  // Add realtime for partners
  .on('postgres_changes', { 
    event: '*', 
    schema: 'public', 
    table: 'partners' 
  }, (payload) => {
    console.log('Change received on partners!', payload);
  })
  .subscribe();

// Export the channel for potential cleanup
export const realtimeChannel = channel;

// Define explicit interfaces for each table to avoid deep type unions
export interface SliderImage {
  id: string;
  image_url: string;
  order_number: number;
  active: boolean;
  link?: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface Partner {
  id: string;
  name: string;
  logo_url: string;
  website_url: string | null;
  order_number: number;
  active: boolean;
  category: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface Event {
  id: string;
  name: string;
  description: string | null;
  place: string;
  location: string | null;
  event_date: string;
  image_url: string | null;
  category: string;
  created_at?: string;
  updated_at?: string;
  past?: boolean;
  
  // Additional fields needed for EventItem component
  title?: string;
  date?: string;
  time?: string;
  image?: string;
  registrationLink?: string;
}

export interface Ticket {
  id: string;
  name: string;
  price: number;
  description: string | null;
  available: boolean;
  features?: string[];
  created_at?: string;
  updated_at?: string;
}

export interface PageContent {
  id: string;
  page_id: string;
  content: any;
  created_at: string;
  updated_at: string;
}

export interface NewsletterSubscriber {
  id: string;
  email: string;
  subscribed_at: string;
}

export interface GalleryItem {
  id: string;
  src: string;
  alt: string;
  type: string;
  category: string;
  created_at?: string;
  updated_at?: string;
}

export interface GeneralContent {
  id: string;
  section_key: string;
  title: string | null;
  subtitle: string | null;
  content: string | null;
  image_url: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface SocialLink {
  id: string;
  title: string;
  url: string;
  icon: string;
  created_at?: string;
  updated_at?: string;
}

// Define a Json type to match Supabase's Json type
export type Json = 
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json }
  | Json[];

// Create a helper function to safely handle Supabase data
export function safeDataAccess<T>(item: any, defaultValue: T): T {
  return item !== undefined && item !== null ? item as T : defaultValue;
}

// Define table names as a union type with literal values for better type checking
export type TableName = 
  | 'events' 
  | 'gallery_items' 
  | 'general_content' 
  | 'newsletter_subscribers' 
  | 'page_content' 
  | 'partners' 
  | 'slider_images' 
  | 'social_links' 
  | 'theme_settings' 
  | 'tickets';

// Map table names to their respective types
export interface TableTypes {
  'partners': Partner;
  'slider_images': SliderImage;
  'events': Event;
  'tickets': Ticket;
  'gallery_items': GalleryItem;
  'general_content': GeneralContent;
  'newsletter_subscribers': NewsletterSubscriber;
  'page_content': PageContent;
  'social_links': SocialLink;
  'theme_settings': any; // Define a proper type if needed
}

// Create a strongly-typed wrapper for Supabase functions
export const customSupabase = {
  from: <T extends TableName>(table: T) => {
    const query = supabase.from(table);
    
    // Add custom type-safe methods to improve type checking
    return {
      ...query,
      select: (columns?: string) => {
        const result = query.select(columns);
        return result;
      },
      insert: (values: Partial<TableTypes[T]> | Partial<TableTypes[T]>[]) => {
        return query.insert(values);
      },
      update: (values: Partial<TableTypes[T]>) => {
        return query.update(values);
      },
      delete: () => query.delete(),
      eq: (column: string, value: any) => query.eq(column, value),
      order: (column: string, options?: { ascending?: boolean }) => query.order(column, options),
      limit: (count: number) => query.limit(count),
      single: () => query.single()
    };
  },
  channel: (name: string) => supabase.channel(name),
  removeChannel: (channel: any) => supabase.removeChannel(channel)
};
